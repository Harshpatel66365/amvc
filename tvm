using Core;
using Entity.Dto.WebAPI;
using Entity.Masters;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using MyRetailer.WebAPI;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace MyRetailer.Middlewares
{
    public class TokenNoValidatorsMiddleware
    {
        private readonly RequestDelegate _next;

        public TokenNoValidatorsMiddleware(RequestDelegate next)
        {
            _next = next;
        }


        public async Task Invoke(HttpContext context)

        {

            Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-IN");

            Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-IN");
            Thread.CurrentThread.CurrentCulture.DateTimeFormat.DateSeparator = "/";
            Thread.CurrentThread.CurrentCulture.DateTimeFormat.ShortDatePattern = "dd/MM/yyyy";
            try
            {
                if (context.Request != null)
                {
                    if (context.Request.Path != null && context.Request.Path.HasValue)
                    {
                        if (context.Request.Path.Value.StartsWith("//"))
                        {
                            context.Request.Path = context.Request.Path.Value.Substring(1);
                        }
                    }
                }
                if (context.Request.Path.ToString().ToLower().StartsWith("/api/"))
                {
                    if (!context.Request.Headers.Keys.Contains("tkt"))
                    {
                        if (!context.Request.Path.ToString().ToLower().Contains("/api/appdevices/register"))
                        {
                            context.Response.StatusCode = 400; //Bad Request                
                            await context.Response.WriteAsync("Token Number is missing");
                            return;
                        }
                    }
                    else
                    {

                        string TokenNo = context.Request.Headers["tkt"];
                        mstAppDevicesEntity objDevice = DAL.Masters.mstAppDevicesSQL.GetByTokenNo(TokenNo);
                        if (objDevice == null)
                        {
                            context.Response.StatusCode = 401; //UnAuthorized
                            await context.Response.WriteAsync("Invalid Token Number");
                            return;
                        }
                        else
                        {
                            if (objDevice.IsActive)
                            {
                                context.Items["CurrentDevice"] = objDevice;
                                if (objDevice.CustomerID > 0)
                                {
                                    mstCustomerEntity objCustomer = new mstCustomerEntity();
                                    objCustomer = DAL.Masters.mstCustomerSQL.GetByCustomerID(objDevice.CustomerID);
                                    //if (objDevice.VendorID > 0 && objCustomer.CustomerID > 0)
                                    //{
                                    //    //objUser.AddressBookID = DAL.Masters.mstAddressBookSQL.CheckAddressBookID(objDevice.VendorID, objUser.CustomerID, "", "", 2);
                                    //}
                                    objCustomer.AuthCustomerUserType = 3;
                                    context.Items["CurrentCustomer"] = objCustomer;
                                    //mstVendorEntity objVendor = DAL.Masters.mstVendorSQL.GetByID(objDevice.VendorID, false);
                                    //context.Items["ERPConnectionString"] = objVendor.ERPConnectionString;
                                }
                            }
                            else
                            {
                                context.Response.StatusCode = 401; //UnAuthorized
                                await context.Response.WriteAsync("Hosting Expire....");
                                return;
                            }
                        }

                        string LogTrace = context.Request.Headers["LogTrace"];
                        if (LogTrace == "Y")
                        {

                            //First, get the incoming request
                            var requestBody = await FormatRequest(context.Request);
                            BaseSQLManager<DefaultConnectionString>.LogAllQuery = true;
                            BaseSQLManager<MyRetailerConnectionString>.LogAllQuery = true;

                            HttpResponse response = context.Response;
                            var originalResponseBody = response.Body;
                            var newResponseBody = new MemoryStream();
                            response.Body = newResponseBody;

                            // Call the next middleware in the pipeline
                            try
                            {
                                await _next(context);
                            }
                            catch (Exception exception)
                            {
                                /*exception: but was not managed at app.UseExceptionHandler() 
                                  or by any middleware*/
                                //LogError(log, exception);
                            }


                            newResponseBody.Seek(0, SeekOrigin.Begin);
                            var responseBodyText = await new StreamReader(response.Body).ReadToEndAsync();

                            newResponseBody.Seek(0, SeekOrigin.Begin);
                            await newResponseBody.CopyToAsync(originalResponseBody);



                            Stopwatch stopWatch = Stopwatch.StartNew();
                            stopWatch.Stop();


                            string WebServiceName = context.Request.Path;
                            BaseSQLManager.PerformanceLogData performanceLogData = new BaseSQLManager<DefaultConnectionString>.PerformanceLogData();
                            performanceLogData.CommandText = WebServiceName;
                            performanceLogData.commandType = "API";
                            performanceLogData.watch = stopWatch;
                            performanceLogData.parameter = requestBody;
                            performanceLogData.CommandResponse = responseBodyText;

                            BaseSQLManager.InsertSqlCommandPerformanceLog(performanceLogData);
                            BaseSQLManager<DefaultConnectionString>.LogAllQuery = false;
                            BaseSQLManager<MyRetailerConnectionString>.LogAllQuery = false;
                            return;
                        }


                    }
                }
                //else if (context.Request.Path.ToString().ToLower().StartsWith("/api/"))
                //{

                //}
                else if (context.Request.Path.ToString().ToLower().StartsWith("/Admin"))
                {

                }
                else if (context.Request.Path.ToString().ToLower().StartsWith("/webapi"))
                {

                    if (!context.Request.Headers.Keys.Contains("tkt"))
                    {
                        if (!context.Request.Path.ToString().ToLower().Contains("/webapi/adminwebapi/login") && context.Request.Method != "OPTIONS" && !context.Request.Path.ToString().ToLower().Contains("/webapi/file/upload"))
                        {
                            context.Response.StatusCode = 400; //Bad Request                
                            await context.Response.WriteAsync("Token Number is missing");
                            return;
                        }
                    }
                    else
                    {
                        string TokenNo = context.Request.Headers["tkt"];
                        int Validate = 0;
                        AdminWebAPIController admin = new AdminWebAPIController();
                        LoggenVendorDetailStore loggenVendorobj = new LoggenVendorDetailStore();
                        loggenVendorobj = admin.TokenValidate(TokenNo);                        
                        context.Items["loggenVendorobj"] = loggenVendorobj;
                        if (loggenVendorobj.Result == 404)
                        {
                            context.Response.StatusCode = 401; //UnAuthorized
                            await context.Response.WriteAsync("Invalid Token Number");
                            return;
                        }
                        else if (loggenVendorobj.Result == 400)
                        {
                            context.Response.StatusCode = 401; //UnAuthorized
                            await context.Response.WriteAsync("Hosting Expire....");
                            return;
                        }
                    }
                    string LogTrace = context.Request.Headers["LogTrace"];
                    if (LogTrace == "Y")
                    {

                        //First, get the incoming request
                        var requestBody = await FormatRequest(context.Request);
                        BaseSQLManager<DefaultConnectionString>.LogAllQuery = true;
                        BaseSQLManager<MyRetailerConnectionString>.LogAllQuery = true;

                        HttpResponse response = context.Response;
                        var originalResponseBody = response.Body;
                        var newResponseBody = new MemoryStream();
                        response.Body = newResponseBody;

                        // Call the next middleware in the pipeline
                        try
                        {
                            await _next(context);
                        }
                        catch (Exception exception)
                        {
                            /*exception: but was not managed at app.UseExceptionHandler() 
                              or by any middleware*/
                            //LogError(log, exception);
                        }


                        newResponseBody.Seek(0, SeekOrigin.Begin);
                        var responseBodyText = await new StreamReader(response.Body).ReadToEndAsync();

                        newResponseBody.Seek(0, SeekOrigin.Begin);
                        await newResponseBody.CopyToAsync(originalResponseBody);



                        Stopwatch stopWatch = Stopwatch.StartNew();
                        stopWatch.Stop();


                        string WebServiceName = context.Request.Path;
                        BaseSQLManager.PerformanceLogData performanceLogData = new BaseSQLManager<DefaultConnectionString>.PerformanceLogData();
                        performanceLogData.CommandText = WebServiceName;
                        performanceLogData.commandType = "API";
                        performanceLogData.watch = stopWatch;
                        performanceLogData.parameter = requestBody;
                        performanceLogData.CommandResponse = responseBodyText;

                        BaseSQLManager.InsertSqlCommandPerformanceLog(performanceLogData);
                        BaseSQLManager<DefaultConnectionString>.LogAllQuery = false;
                        BaseSQLManager<MyRetailerConnectionString>.LogAllQuery = false;
                        return;
                    }

                }
                else if (context.Request.Path.ToString().ToLower().Equals("/"))
                {
                    //string URLValue = context.Request.Host.Host;
                    //mstAppPackageEntity objmstAppPackage = DAL.Masters.mstAppPackageSQL.GetByWebURL(URLValue);
                    ////mstVendorEntity objVendor = DAL.Masters.mstVendorSQL.GetByWebURL(URLValue);
                    //mstVendorEntity objVendor = DAL.Masters.mstVendorSQL.GetByID(objmstAppPackage.DefaultVendorID);
                    //if (objVendor != null && objVendor.VendorID > 0)
                    //{
                    //    objVendor.WebURL = URLValue;
                    //    mstVendorConfig objVendorConfig = DAL.Masters.mstVendorSQL.GetVendorConfig(objVendor.VendorID, false);
                    //    context.Items["CurrentVendor"] = objVendor;
                    //    context.Items["CurrentVendorConfig"] = objVendorConfig;
                    //    context.Items["CurrentAppPackage"] = objmstAppPackage;
                    //}
                    //context.Request.Path = "/Home";
                }
                else
                {
                    string URLValue = context.Request.Host.Value;
                    //mstVendorEntity objVendor = DAL.Masters.mstVendorSQL.GetByWebURL(URLValue);
                    ////mstAppPackageEntity objmstAppPackage = DAL.Masters.mstAppPackageSQL.GetByWebURL(URLValue);

                    ////if (objmstAppPackage == null)
                    ////{
                    ////    await context.Response.WriteAsync("Vendor Configuration is Pending");
                    ////    return;
                    ////}
                    ////mstVendorEntity objVendor = DAL.Masters.mstVendorSQL.GetByID(objmstAppPackage.DefaultVendorID);

                    ////if (objVendor != null && objVendor.VendorID > 0)
                    ////{
                    ////    objVendor.WebURL = URLValue;
                    ////    mstVendorConfig objVendorConfig = DAL.Masters.mstVendorSQL.GetVendorConfig(objVendor.VendorID, false);
                    ////    context.Items["CurrentVendor"] = objVendor;
                    ////    context.Items["CurrentVendorConfig"] = objVendorConfig;
                    ////    context.Items["CurrentAppPackage"] = objmstAppPackage;
                    ////}

                    //else
                    //{
                    //    await context.Response.WriteAsync("Vendor Configuration is Pending");
                    //    return;
                    //    //context.Response.StatusCode = 401;
                    //    //context.Request.Path = "/Admin/Login/Index";
                    //    //context.Response.Redirect("~/Admin/Login/Index");
                    //}
                }

                await _next.Invoke(context);
            }
            catch (Exception ex)
            {
                string TokenNo = "";
                try
                {
                    TokenNo = context.Request.Headers["tkt"];
                }
                catch { }

                //MixSQL.SetError();
                ErrorMgmt.AddError(ex, "Token No :" + TokenNo);
                throw;
            }
        }
        public async Task<string> FormatRequest(HttpRequest request)
        {
            request.EnableBuffering();
            var streamReader = new StreamReader(request.Body);
            var requestBody = await streamReader.ReadToEndAsync();
            // Reset the request's body stream position for 
            // next middleware in the pipeline.
            request.Body.Position = 0;
            //return requestBody;

            return requestBody;
        }

        public async Task<string> FormatResponse(HttpResponse response)
        {
            //We need to read the response stream from the beginning...
            response.Body.Seek(0, SeekOrigin.Begin);

            //...and copy it into a string
            string text = await new StreamReader(response.Body).ReadToEndAsync();

            //We need to reset the reader for the response so that the client can read it.
            response.Body.Seek(0, SeekOrigin.Begin);

            //Return the string for the response, including the status code (e.g. 200, 404, 401, etc.)
            return $"{response.StatusCode}: {text}";
        }
    }

    public static class MiddlewareExtensions
    {
        public static IApplicationBuilder UseMiddleware(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<TokenNoValidatorsMiddleware>();
        }
    }

}

